/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package routercon;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.lang.NumberFormatException;

/**
 *
 * @author daniel
 */
public class ConfManager extends javax.swing.JFrame
{

    /**
     * Creates new form ConfManager
     */
    public ConfManager()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblKA = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        txtKA = new javax.swing.JTextField();
        lblNeighbors = new javax.swing.JLabel();
        lblTimeout = new javax.swing.JLabel();
        txtTimeout = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNeighbors = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnEliminar1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblKA.setText("Tiempo \nde KA:");

        btnSave.setText("Guardar Configuraci√≥n");
        btnSave.setActionCommand("");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblNeighbors.setText("Vecinos:");

        lblTimeout.setText("Timeout:");

        tblNeighbors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "IP", "Costo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblNeighbors);

        btnEliminar.setText("Eliminar Vecino");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar Vecino");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar1.setText("Actualizar Lista");
        btnEliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTimeout)
                            .addComponent(lblKA))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtKA, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(lblNeighbors)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar1)))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKA)
                    .addComponent(txtKA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimeout)
                    .addComponent(txtTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNeighbors)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnAgregar)
                    .addComponent(btnEliminar1))
                .addGap(26, 26, 26))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
       this.getRouterConf(true);
    }//GEN-LAST:event_formWindowOpened

    private void getRouterConf(boolean disposeFrame)
    {
        try
       {
            Socket clientSocket = new Socket(RouterListener.ip, 1983);
            DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String message = "GetConf";
            out.write(message.getBytes());
            String conf = in.readLine();
            clientSocket.close();
            
            String[] confValues = conf.split("\\|");
            this.txtKA.setText(confValues[0]);
            this.txtTimeout.setText(confValues[1]);
            for(int i = 0; i < this.m.getRowCount(); i++)
            {
               this.m.removeRow(i);
            }
            if(confValues.length > 2)
            {
                this.updateTblNeighbors(confValues[2]);
            }
            this.tblNeighbors.setModel(this.m);
       }
       catch(Exception e)
       {
           JOptionPane.showMessageDialog(this,"Ha ocurrido un error obteniendo la configuracion del router","Error!",JOptionPane.ERROR_MESSAGE);
           if (disposeFrame)
                this.dispose();
       }
    }
    private void updateTblNeighbors(String neighborsList)
    {
        String [] neighbors = neighborsList.split(";");
        for (String neighbor : neighbors)
        {
            String[] data = neighbor.split(":");
            this.m.addRow(data);
        }
    }
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
       try
       {
            Socket clientSocket = new Socket(RouterListener.ip, 1983);
            DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String message = "SaveConf|"+this.txtKA.getText()+"|"+this.txtTimeout.getText();
            out.write(message.getBytes());
            String input = in.readLine();
            clientSocket.close();
            if(input.contains("OK"))
                JOptionPane.showMessageDialog(this,"Configuraci√≥n guardada con exito",":)",JOptionPane.INFORMATION_MESSAGE);
            else
                throw new Exception(input);
       }
       catch(Exception e)
       {
           JOptionPane.showMessageDialog(this,"Ha ocurrido un error guardando la configuraci√≥n: "+e.getMessage(),"Error!",JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        JTextField routerName = new JTextField();
        JTextField ip = new JTextField();
        JTextField costo = new JTextField();
        Object[] nodeInfo = {
            "Nombre del Router:", routerName,
            "IP:", ip,
            "Costo:",costo
        };

        int option = JOptionPane.showConfirmDialog(null, nodeInfo, "Agregar Router", JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
        if (option == JOptionPane.OK_OPTION) 
        {
            try {
                int costoInt = Integer.parseInt(costo.getText());
                if(costoInt < 1)
                {
                   throw new NumberFormatException("costo negativo");
                }
                
                Socket clientSocket = new Socket(RouterListener.ip, 1983);
                DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                String message = "AddNode|"+routerName.getText()+"|"+costoInt+"|"+ip.getText();
                out.write(message.getBytes());
                String input = in.readLine();
                clientSocket.close();
                
                if(input.contains("OK"))
                {
                    JOptionPane.showMessageDialog(this,"Nodo agregado exitosamente",":)",JOptionPane.INFORMATION_MESSAGE);
                    this.getRouterConf(false);
                }
                else
                {
                    throw new Exception(input);
                }
            } catch (NumberFormatException e) {
                 JOptionPane.showMessageDialog(this,"El costo debe ser un numero entero positivo","Error!",JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                 JOptionPane.showMessageDialog(this,"Ha ocurrido un error: "+e.getMessage(),"Error!",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminar1ActionPerformed
        this.getRouterConf(false);
    }//GEN-LAST:event_btnEliminar1ActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       
        int selectedRow = this.tblNeighbors.getSelectedRow();
        if (selectedRow != -1)
        {
            String selectedNode = (String)this.m.getValueAt(selectedRow, 0);
            try
            {
                Socket clientSocket = new Socket(RouterListener.ip, 1983);
                DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                String message = "RemoveNode|"+selectedNode;
                out.write(message.getBytes());
                String input = in.readLine();
                clientSocket.close();
                
                if(input.contains("OK"))
                {
                    JOptionPane.showMessageDialog(this,"Nodo eliminado exitosamente",":)",JOptionPane.INFORMATION_MESSAGE);
                    this.getRouterConf(false);
                }
                else
                {
                    throw new Exception(input);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,"Ha ocurrido un error eliminando el vecino "+selectedNode+": "+e.getMessage(),"Error!",JOptionPane.ERROR_MESSAGE);
            } 
        } else {
            JOptionPane.showMessageDialog(this,"Debe seleccionar un vecino a eliminar","",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ConfManager().setVisible(true);
            }
        });
    }

    private Object[] columnNames = {"Nombre", "IP", "Costo"};        
    private DefaultTableModel m = new DefaultTableModel(new Object[0][0], columnNames);  
    private String[] originalNeighbors;
    private DefaultListModel<String> listModel = new DefaultListModel();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminar1;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblKA;
    private javax.swing.JLabel lblNeighbors;
    private javax.swing.JLabel lblTimeout;
    private javax.swing.JTable tblNeighbors;
    private javax.swing.JTextField txtKA;
    private javax.swing.JTextField txtTimeout;
    // End of variables declaration//GEN-END:variables
}
